#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const POLY_AUTO_LENGTH: i32 = -1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __graal_isolate_t {
    _unused: [u8; 0],
}
pub type graal_isolate_t = __graal_isolate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __graal_isolatethread_t {
    _unused: [u8; 0],
}
pub type graal_isolatethread_t = __graal_isolatethread_t;
pub type ulong = ::std::os::raw::c_ulong;
pub const __graal_create_isolate_params_version: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __graal_create_isolate_params_t {
    pub version: ::std::os::raw::c_int,
    pub reserved_address_space_size: ulong,
}
#[test]
fn bindgen_test_layout___graal_create_isolate_params_t() {
    assert_eq!(
        ::std::mem::size_of::<__graal_create_isolate_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(__graal_create_isolate_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__graal_create_isolate_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__graal_create_isolate_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__graal_create_isolate_params_t>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__graal_create_isolate_params_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__graal_create_isolate_params_t>())).reserved_address_space_size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__graal_create_isolate_params_t),
            "::",
            stringify!(reserved_address_space_size)
        )
    );
}
pub type graal_create_isolate_params_t = __graal_create_isolate_params_t;
extern "C" {
    pub fn graal_create_isolate(
        params: *mut graal_create_isolate_params_t,
        isolate: *mut *mut graal_isolate_t,
    ) -> i32;
}
extern "C" {
    pub fn graal_attach_thread(
        isolate: *mut graal_isolate_t,
        thread: *mut *mut graal_isolatethread_t,
    ) -> i32;
}
extern "C" {
    pub fn graal_current_thread(isolate: *mut graal_isolate_t) -> *mut graal_isolatethread_t;
}
extern "C" {
    pub fn graal_current_isolate(thread: *mut graal_isolatethread_t) -> *mut graal_isolate_t;
}
extern "C" {
    pub fn graal_detach_thread(thread: *mut graal_isolatethread_t) -> i32;
}
extern "C" {
    pub fn graal_tear_down_isolate(isolate: *mut graal_isolate_t) -> i32;
}
pub const poly_status_poly_ok: poly_status = 0;
pub const poly_status_poly_invalid_arg: poly_status = 1;
pub const poly_status_poly_object_expected: poly_status = 2;
pub const poly_status_poly_string_expected: poly_status = 3;
pub const poly_status_poly_name_expected: poly_status = 4;
pub const poly_status_poly_function_expected: poly_status = 5;
pub const poly_status_poly_number_expected: poly_status = 6;
pub const poly_status_poly_boolean_expected: poly_status = 7;
pub const poly_status_poly_array_expected: poly_status = 8;
pub const poly_status_poly_generic_failure: poly_status = 9;
pub const poly_status_poly_pending_exception: poly_status = 10;
pub const poly_status_poly_cancelled: poly_status = 11;
pub const poly_status_poly_status_last: poly_status = 12;
pub type poly_status = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly_extended_error_info {
    pub error_message: *mut ::std::os::raw::c_char,
    pub engine_reserved: *mut ::std::os::raw::c_void,
    pub engine_error_code: ::std::os::raw::c_uint,
    pub error_code: poly_status,
}
#[test]
fn bindgen_test_layout_poly_extended_error_info() {
    assert_eq!(
        ::std::mem::size_of::<poly_extended_error_info>(),
        24usize,
        concat!("Size of: ", stringify!(poly_extended_error_info))
    );
    assert_eq!(
        ::std::mem::align_of::<poly_extended_error_info>(),
        8usize,
        concat!("Alignment of ", stringify!(poly_extended_error_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<poly_extended_error_info>())).error_message as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(poly_extended_error_info),
            "::",
            stringify!(error_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<poly_extended_error_info>())).engine_reserved as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(poly_extended_error_info),
            "::",
            stringify!(engine_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<poly_extended_error_info>())).engine_error_code as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(poly_extended_error_info),
            "::",
            stringify!(engine_error_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<poly_extended_error_info>())).error_code as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(poly_extended_error_info),
            "::",
            stringify!(error_code)
        )
    );
}
pub type poly_handle = *mut ::std::os::raw::c_void;
pub type poly_value = poly_handle;
pub type poly_engine = poly_handle;
pub type poly_engine_builder = poly_handle;
pub type poly_context = poly_handle;
pub type poly_context_builder = poly_handle;
pub type poly_callback_info = poly_handle;
pub type poly_language = poly_handle;
pub type poly_isolate_params = graal_create_isolate_params_t;
pub type poly_isolate = *mut graal_isolate_t;
pub type poly_thread = *mut graal_isolatethread_t;
pub type poly_callback = ::std::option::Option<
    unsafe extern "C" fn(thread: poly_thread, info: poly_callback_info) -> poly_value,
>;
extern "C" {
    pub fn poly_create_isolate(
        params: *const poly_isolate_params,
        isolate: *mut poly_isolate,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_attach_thread(isolate: poly_isolate, thread: *mut poly_thread) -> poly_status;
}
extern "C" {
    pub fn poly_current_thread(isolate: poly_isolate) -> poly_thread;
}
extern "C" {
    pub fn poly_current_isolate(thread: poly_thread) -> poly_isolate;
}
extern "C" {
    pub fn poly_detach_thread(thread: poly_thread) -> poly_status;
}
extern "C" {
    pub fn poly_tear_down_isolate(isolate: poly_isolate) -> poly_status;
}
extern "C" {
    pub fn poly_create_engine_builder(
        thread: poly_thread,
        result: *mut poly_engine_builder,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_engine_builder_option(
        thread: poly_thread,
        engine_builder: poly_engine_builder,
        key_utf8: *const ::std::os::raw::c_char,
        value_utf8: *const ::std::os::raw::c_char,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_engine_builder_build(
        thread: poly_thread,
        engine_builder: poly_engine_builder,
        result: *mut poly_engine,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_engine(thread: poly_thread, result: *mut poly_engine) -> poly_status;
}
extern "C" {
    pub fn poly_engine_close(
        thread: poly_thread,
        engine: poly_engine,
        cancel_if_executing: bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_engine_get_languages(
        thread: poly_thread,
        engine: poly_engine,
        language_array: *mut poly_language,
        size: *mut usize,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_context_builder(
        thread: poly_thread,
        permitted_languages: *mut *const ::std::os::raw::c_char,
        length: usize,
        result: *mut poly_context_builder,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_builder_engine(
        thread: poly_thread,
        context_builder: poly_context_builder,
        engine: poly_engine,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_builder_option(
        thread: poly_thread,
        context_builder: poly_context_builder,
        key_utf8: *const ::std::os::raw::c_char,
        value_utf8: *const ::std::os::raw::c_char,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_builder_allow_all_access(
        thread: poly_thread,
        context_builder: poly_context_builder,
        allow_all_access: bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_builder_allow_io(
        thread: poly_thread,
        context_builder: poly_context_builder,
        allow_IO: bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_builder_allow_native_access(
        thread: poly_thread,
        context_builder: poly_context_builder,
        allow_native_access: bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_builder_allow_create_thread(
        thread: poly_thread,
        context_builder: poly_context_builder,
        allow_create_thread: bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_builder_build(
        thread: poly_thread,
        context_builder: poly_context_builder,
        result: *mut poly_context,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_context(
        thread: poly_thread,
        permitted_languages: *mut *const ::std::os::raw::c_char,
        length: usize,
        result: *mut poly_context,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_close(
        thread: poly_thread,
        context: poly_context,
        cancel_if_executing: bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_eval(
        thread: poly_thread,
        context: poly_context,
        language_id: *const ::std::os::raw::c_char,
        name_utf8: *const ::std::os::raw::c_char,
        source_utf8: *const ::std::os::raw::c_char,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_get_engine(
        thread: poly_thread,
        context: poly_context,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_get_bindings(
        thread: poly_thread,
        context: poly_context,
        language_id: *const ::std::os::raw::c_char,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_context_get_polyglot_bindings(
        thread: poly_thread,
        context: poly_context,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_can_execute(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_execute(
        thread: poly_thread,
        value: poly_value,
        args: *mut poly_value,
        args_size: i32,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_get_member(
        thread: poly_thread,
        value: poly_value,
        utf8_identifier: *const ::std::os::raw::c_char,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_put_member(
        thread: poly_thread,
        value: poly_value,
        utf8_identifier: *const ::std::os::raw::c_char,
        member: poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_has_member(
        thread: poly_thread,
        value: poly_value,
        utf8_identifier: *const ::std::os::raw::c_char,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_boolean(
        thread: poly_thread,
        context: poly_context,
        value: bool,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_int8(
        thread: poly_thread,
        context: poly_context,
        value: i8,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_int16(
        thread: poly_thread,
        context: poly_context,
        value: i16,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_int32(
        thread: poly_thread,
        context: poly_context,
        value: i32,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_int64(
        thread: poly_thread,
        context: poly_context,
        value: i64,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_uint8(
        thread: poly_thread,
        context: poly_context,
        value: u8,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_uint16(
        thread: poly_thread,
        context: poly_context,
        value: u16,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_uint32(
        thread: poly_thread,
        context: poly_context,
        value: u32,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_float(
        thread: poly_thread,
        context: poly_context,
        value: f32,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_double(
        thread: poly_thread,
        context: poly_context,
        value: f64,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_character(
        thread: poly_thread,
        context: poly_context,
        character: i16,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_string_utf8(
        thread: poly_thread,
        context: poly_context,
        string: *const ::std::os::raw::c_char,
        length: usize,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_null(
        thread: poly_thread,
        context: poly_context,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_object(
        thread: poly_thread,
        context: poly_context,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_array(
        thread: poly_thread,
        context: poly_context,
        value_array: *const poly_value,
        array_length: i64,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_has_array_elements(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_get_array_element(
        thread: poly_thread,
        value: poly_value,
        index: i64,
        result: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_set_array_element(
        thread: poly_thread,
        value: poly_value,
        index: i64,
        element: poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_remove_array_element(
        thread: poly_thread,
        value: poly_value,
        index: i64,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_get_array_size(
        thread: poly_thread,
        value: poly_value,
        result: *mut i64,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_is_null(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_is_boolean(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_is_string(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_is_number(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_float(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_double(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_int8(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_int16(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_int32(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_int64(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_uint8(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_uint16(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_fits_in_uint32(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_string_utf8(
        thread: poly_thread,
        value: poly_value,
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: usize,
        result: *mut usize,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_to_string_utf8(
        thread: poly_thread,
        value: poly_value,
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: usize,
        result: *mut usize,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_boolean(
        thread: poly_thread,
        value: poly_value,
        result: *mut bool,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_int8(
        thread: poly_thread,
        value: poly_value,
        result: *mut i8,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_int16(
        thread: poly_thread,
        value: poly_value,
        result: *mut i16,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_int32(
        thread: poly_thread,
        value: poly_value,
        result: *mut i32,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_int64(
        thread: poly_thread,
        value: poly_value,
        result: *mut i64,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_uint8(
        thread: poly_thread,
        value: poly_value,
        result: *mut u8,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_uint16(
        thread: poly_thread,
        value: poly_value,
        result: *mut u16,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_uint32(
        thread: poly_thread,
        value: poly_value,
        result: *mut u32,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_float(
        thread: poly_thread,
        value: poly_value,
        result: *mut f32,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_value_as_double(
        thread: poly_thread,
        value: poly_value,
        result: *mut f64,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_language_get_id(
        thread: poly_thread,
        language: poly_language,
        utf8_result: *mut ::std::os::raw::c_char,
        buffer_size: usize,
        length: *mut usize,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_get_last_error_info(
        thread: poly_thread,
        result: *mut *const poly_extended_error_info,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_create_function(
        thread: poly_thread,
        context: poly_context,
        callback: poly_callback,
        data: *mut ::std::os::raw::c_void,
        value: *mut poly_value,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_get_callback_info(
        thread: poly_thread,
        callback_info: poly_callback_info,
        argc: *mut usize,
        argv: *mut poly_value,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_throw_exception(
        thread: poly_thread,
        utf8_message: *const ::std::os::raw::c_char,
    ) -> poly_status;
}
extern "C" {
    pub fn poly_destroy_handle(thread: poly_thread, handle: poly_handle) -> poly_status;
}
